{"version":3,"file":"exp-route.js","sources":["src/path-to-regexp.js","src/search-params.js","src/create-match.js"],"sourcesContent":["/**\n *\n * @param {string} path\n * @return {[RegExp,string[]]}\n */\nexport function pathToRegExp(path) {\n    const params = [];\n    const regFolders = path.split(/\\//g).map((folder) => {\n        if (!folder) return \"\";\n        const [, hash = \"\", type, spread, param] = folder.match(\n            /(#){0,1}([\\{\\[]){0,1}(\\.\\.\\.){0,1}(\\w+)([\\}\\]]){0,1}/\n        );\n        if (type == \"{\" || type == \"[\") {\n            params.push(param);\n            const wildcard = type == \"[\" ? \"*\" : \"+\";\n            const slash =\n                (hash ? \"(?:/#|#)\" : \"(?:/)\") + (type == \"[\" ? \"{0,1}\" : \"{1}\");\n            return spread\n                ? `${slash}(.${wildcard})`\n                : `${slash}([^\\/#]${wildcard})`;\n        } else {\n            return (folder[0] == \"#\" ? \"(?:/#|#)\" : \"/\") + ignore(folder);\n        }\n    });\n    return [RegExp(\"^\" + regFolders.join(\"\") + \"$\"), params];\n}\n\n/**\n *\n * @param {string} str\n */\nexport const ignore = (str) => str.replace(/([.+^()\\-:])/g, \"\\\\$1\");\n","/**\n *\n * @param {string} path\n */\nexport const getParts = (path) => path.split(/(\\?.*)/);\n/**\n * @param {string} search\n * @param {Object} [props]\n */\nexport function searchParams(search, props = {}) {\n    search.replace(\n        /(?:\\?|&){1}([^=&]+)(?:=([^\\?&]+)){0,1}/g,\n        /**\n         * @param {string} _\n         * @param {string} index\n         * @param {string} value\n         */\n        (_, index, value) => {\n            props[index] = value;\n            return \"\";\n        }\n    );\n    return props;\n}\n","import { pathToRegExp } from \"./path-to-regexp\";\nimport { getParts } from \"./search-params\";\n/**\n *\n * @param {string} regPath\n */\nexport function createMatch(regPath) {\n    const [path] = getParts(regPath);\n    const [testPath, paramsPath] = pathToRegExp(path);\n    /**\n     * @param {string} request\n     */\n    const match = (request) => {\n        const [path] = getParts(request);\n        const test = path.match(testPath);\n        if (test) {\n            const [, ...args] = test;\n            const query = {};\n            return args.reduce((p, value, index) => {\n                p[paramsPath[index]] = value;\n                return p;\n            }, query);\n        }\n    };\n    return match;\n}\n"],"names":[],"mappings":"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"}